"""
AxoDen Claude Code Integration - AI-powered development workflow helper
"""

import os
import sys
import subprocess
from typing import Optional, Dict, Any
from pathlib import Path

from .client import AxoDenClient
from .exceptions import AxoDenError


class ClaudeCodeIntegration:
    """Helper for integrating AxoDen with Claude Code workflows"""
    
    def __init__(self, client: Optional[AxoDenClient] = None):
        self.client = client or AxoDenClient()
        self.workspace_file = Path(".axoden_workspace.json")
    
    def create_guidance_prompt(self, problem: str, recommendation) -> str:
        """Create a Claude Code prompt with AI guidance"""
        prompt = f"""I need help with: {problem}

Based on AxoDen's AI guidance, please apply the following approach:

**Recommended Approach**: {recommendation.methodology_name}

**Description**: {recommendation.description}

**Steps to follow**:
{chr(10).join(f'- {step}' for step in recommendation.steps)}

**Key principles**: {recommendation.reasoning}

Please help me implement this solution following the above approach."""
        
        return prompt
    
    def save_to_clipboard(self, text: str):
        """Save text to system clipboard for easy pasting into Claude Code"""
        try:
            if sys.platform == "darwin":  # macOS
                subprocess.run(["pbcopy"], input=text.encode(), check=True)
            elif sys.platform == "linux":
                subprocess.run(["xclip", "-selection", "clipboard"], input=text.encode(), check=True)
            elif sys.platform == "win32":
                subprocess.run(["clip"], input=text.encode(), check=True, shell=True)
            return True
        except Exception:
            return False
    
    def create_methodology_file(self, problem: str, recommendation, filename: Optional[str] = None) -> str:
        """Create a methodology file that Claude Code can read"""
        if not filename:
            filename = f"METHODOLOGY_{problem[:30].replace(' ', '_')}.md"
        
        content = f"""# AxoDen Methodology Guidance

## Problem
{problem}

## Recommended Approach: {recommendation.methodology_name}

### Overview
{recommendation.description}

### Implementation Steps
{chr(10).join(f'{i}. {step}' for i, step in enumerate(recommendation.steps, 1))}

### Reasoning
{recommendation.reasoning}

### Alternative Approaches
{chr(10).join(f'- {alt}' for alt in recommendation.alternatives)}

---
*Generated by AxoDen - Use this methodology with Claude Code for best results*
"""
        
        with open(filename, 'w') as f:
            f.write(content)
        
        return filename
    
    def enhance_claude_prompt(self, original_prompt: str) -> str:
        """Enhance a Claude Code prompt with methodology context"""
        # Try to extract the core problem from the prompt
        problem = self._extract_problem(original_prompt)
        
        try:
            # Get methodology recommendation
            recommendation = self.client.recommend(problem)
            
            # Enhance the prompt
            enhanced = f"""{original_prompt}

---
📚 **AxoDen Methodology Guidance**

For this task, consider using: **{recommendation.methodology_name}**

Key steps:
{chr(10).join(f'- {step}' for step in recommendation.steps[:3])}

This approach is recommended because: {recommendation.reasoning}
---"""
            
            return enhanced
            
        except Exception:
            # If recommendation fails, return original prompt
            return original_prompt
    
    def _extract_problem(self, prompt: str) -> str:
        """Extract the core problem from a Claude Code prompt"""
        # Simple extraction - take first line or first 100 chars
        lines = prompt.strip().split('\n')
        if lines:
            return lines[0][:100]
        return prompt[:100]


# Convenience functions for direct CLI usage
def quick_recommend(problem: str):
    """Quick recommendation for command line usage"""
    try:
        integration = ClaudeCodeIntegration()
        client = integration.client
        
        # Get recommendation
        recommendation = client.recommend(problem, format="claude")
        
        # Create prompt
        prompt = integration.create_guidance_prompt(problem, recommendation)
        
        # Try to copy to clipboard
        if integration.save_to_clipboard(prompt):
            print("✅ AI guidance copied to clipboard!")
            print("📋 Paste into Claude Code to apply this approach\n")
        else:
            print("💡 Copy the following guidance to Claude Code:\n")
            print("-" * 50)
            print(prompt)
            print("-" * 50)
        
        # Also save to file
        filename = integration.create_methodology_file(problem, recommendation)
        print(f"\n📄 Methodology saved to: {filename}")
        
    except Exception as e:
        print(f"❌ Error: {e}")
        sys.exit(1)


if __name__ == "__main__":
    if len(sys.argv) > 1:
        problem = " ".join(sys.argv[1:])
        quick_recommend(problem)
    else:
        print("Usage: python -m axoden_client.claude_integration 'your problem description'")
        sys.exit(1)